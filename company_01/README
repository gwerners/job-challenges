
Os desafios foram numerados e nomeados de acordo com o pdf.
Não usei git já que não era um projeto e sim funções (o que eu faço em 1 commit,
então não faria sentido usar git para ter 1 commit com as novas funções)

Para executar no linux, basta rodar "run.sh" no shell e vão aparecer opções com instruções
caso necessário.
Nao tentei portar para windows usando cygwin nem mingw pq nao tenho ambiente de desenvolvimento
no windows.

abraço!


Resultados:
###############################################################################
01-inverter-string - usei google benchmark e google mock para comparar com outras implementações

output:
-------------------------------------------------------------------------
Benchmark                               Time             CPU   Iterations
-------------------------------------------------------------------------
BM_invertString                      41.3 ns         41.3 ns     13860353
BM_c_invert                          65.7 ns         65.7 ns      9465211
BM_c_invert_with_size                58.7 ns         58.7 ns     11818855
BM_cpp_invert_append                  188 ns          188 ns      3727244
BM_cpp_invert_reverse_iterator        181 ns          181 ns      3758280
[==========] Running 3 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 3 tests from StringInvertTest
[ RUN      ] StringInvertTest.NormalValues
[       OK ] StringInvertTest.NormalValues (0 ms)
[ RUN      ] StringInvertTest.EmptyValues
[       OK ] StringInvertTest.EmptyValues (0 ms)
[ RUN      ] StringInvertTest.NullStrings
[       OK ] StringInvertTest.NullStrings (0 ms)
[----------] 3 tests from StringInvertTest (0 ms total)

[----------] Global test environment tear-down
[==========] 3 tests from 1 test suite ran. (0 ms total)
[  PASSED  ] 3 tests.

valgrind ./build/mock_string_invert
==8283== 
==8283== HEAP SUMMARY:
==8283==     in use at exit: 0 bytes in 0 blocks
==8283==   total heap usage: 467 allocs, 467 frees, 133,810 bytes allocated
==8283== 
==8283== All heap blocks were freed -- no leaks are possible
==8283== 
==8283== For counts of detected and suppressed errors, rerun with: -v
==8283== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

 valgrind ./build/bench_string_invert 
==8287== 
==8287== HEAP SUMMARY:
==8287==     in use at exit: 353 bytes in 5 blocks
==8287==   total heap usage: 412 allocs, 407 frees, 306,978 bytes allocated
==8287== 
==8287== LEAK SUMMARY:
==8287==    definitely lost: 0 bytes in 0 blocks
==8287==    indirectly lost: 0 bytes in 0 blocks
==8287==      possibly lost: 0 bytes in 0 blocks
==8287==    still reachable: 353 bytes in 5 blocks
==8287==         suppressed: 0 bytes in 0 blocks
==8287== Rerun with --leak-check=full to see details of leaked memory
==8287== 
==8287== For counts of detected and suppressed errors, rerun with: -v
==8287== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

###############################################################################
02-sudoku - fiz um leitor de json para validar sudoku sem recompilar
output:
<Valid sudoku found>
Loading json from file [teste-01.json]
<Valid sudoku found>
Loading json from file [teste-02.json]
<Valid sudoku found>
Loading json from file [teste-03.json]
horizontal line test - failed value [3] at[0][6]
<Invalid sudoku found>

valgrind ./build/sudoku -t
==8305== Memcheck, a memory error detector
==8305== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8305== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8305== Command: ./build/sudoku -t
==8305== 
<Valid sudoku found>
==8305== 
==8305== HEAP SUMMARY:
==8305==     in use at exit: 0 bytes in 0 blocks
==8305==   total heap usage: 2 allocs, 2 frees, 73,728 bytes allocated
==8305== 
==8305== All heap blocks were freed -- no leaks are possible
==8305== 
==8305== For counts of detected and suppressed errors, rerun with: -v
==8305== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
###############################################################################
03-split-string - fiz um sistema de unit-test basico para conferir
output:
number of tokens: 4
entry tk1
entry tk2
entry tk3
entry tk4
	test  0
	test / 0
	test // 0
	test /// 0
	test bla 1
	test /bla 1
	test ////////bla 1
	test bla/ 1
	test bla//////// 1
	test bla/bla 2
	test bla/bla/ 2
	test /bla/bla 2
	test bla/bla////// 2
	test //////bla/bla 2
	test bla///bla 2
	test bla///bla/ 2
	test /bla///bla 2
	test bla///bla////// 2
	test //////bla///bla 2
ALL tests passed with SUCESS

valgrind ./build/split
==8555== 
==8555== HEAP SUMMARY:
==8555==     in use at exit: 0 bytes in 0 blocks
==8555==   total heap usage: 47 allocs, 47 frees, 74,076 bytes allocated
==8555== 
==8555== All heap blocks were freed -- no leaks are possible
==8555== 
==8555== For counts of detected and suppressed errors, rerun with: -v
==8555== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
###############################################################################
04-stack
output:

0x5607d8cc4e70
stack is empty!
stack not empty!
removing data 6
removing data 4
removing data 2
free 5
free 3
free 1

valgrind ./build/stack
==8628== 
==8628== HEAP SUMMARY:
==8628==     in use at exit: 0 bytes in 0 blocks
==8628==   total heap usage: 9 allocs, 9 frees, 73,832 bytes allocated
==8628== 
==8628== All heap blocks were freed -- no leaks are possible
==8628== 
==8628== For counts of detected and suppressed errors, rerun with: -v
==8628== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

###############################################################################
05-partition
initial list: 
entry 60
entry 50
entry 40
entry 30
entry 20
entry 10
_______________________________________________________________________________
list after partitioning: 
entry 10
entry 20
entry 30
entry 40
entry 50
entry 60
_______________________________________________________________________________
initial list: 
entry 60
entry 50
entry 40
entry 30
_______________________________________________________________________________
list after partitioning: 
entry 30
entry 40
entry 50
entry 60
_______________________________________________________________________________
initial list: 
entry 30
entry 20
entry 10
_______________________________________________________________________________
list after partitioning: 
entry 10
entry 20
entry 30
_______________________________________________________________________________
initial list: 
entry 25
entry 20
entry 10
_______________________________________________________________________________
list after partitioning: 
entry 10
entry 20
entry 25
_______________________________________________________________________________
initial list: 
entry 60
entry 50
entry 40
entry 25
_______________________________________________________________________________
list after partitioning: 
entry 25
entry 40
entry 50
entry 60
_______________________________________________________________________________
initial list: 
entry 19
entry 17
entry 15
entry 13
entry 11
entry 12
entry 14
entry 16
entry 18
entry 20
_______________________________________________________________________________
list after partitioning: 
entry 14
entry 12
entry 11
entry 13
entry 15
entry 20
entry 18
entry 16
entry 17
entry 19
_______________________________________________________________________________


valgrind ./build/partition
==7591== 
==7591== HEAP SUMMARY:
==7591==     in use at exit: 0 bytes in 0 blocks
==7591==   total heap usage: 32 allocs, 32 frees, 74,208 bytes allocated
==7591== 
==7591== All heap blocks were freed -- no leaks are possible
==7591== 
==7591== For counts of detected and suppressed errors, rerun with: -v
==7591== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

###############################################################################
06-common
output:
>1
>2
>3
>4
>5
>6
>7
>8
>9
>10
_______________________
>1
>3
>5
>7
>9
>11
>13
>15
>17
>19
_______________________
>9
>7
>5
>3
>1

valgrind ./build/common
==5576== 
==5576== HEAP SUMMARY:
==5576==     in use at exit: 0 bytes in 0 blocks
==5576==   total heap usage: 2 allocs, 2 frees, 73,728 bytes allocated
==5576== 
==5576== All heap blocks were freed -- no leaks are possible
==5576== 
==5576== For counts of detected and suppressed errors, rerun with: -v

###############################################################################
